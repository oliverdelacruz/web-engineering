AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template VPC: Create
  an Amazon VPC, Gateway, Subnets, etc.
Parameters:
  RegionName:
    Description: Name of the region
    Type: String
    Default: us-east-1
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - eu-west-1
Mappings:
  AZNames:
    us-east-1:
      a: us-east-1a
      b: us-east-1b
      c: us-east-1c
    us-east-2:
      a: us-east-2a
      b: us-east-2b
      c: us-east-2c
    us-west-1:
      a: us-west-1a
      b: us-west-1b
      c: us-west-1c
    us-west-2:
      a: us-west-2a
      b: us-west-2b
      c: us-west-2c
    eu-west-1:
      a: us-west-1
      b: us-west-1
      c: us-west-1
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: VPCStack
          Value: VPCStack
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: VPCStack
          Value: VPCStack
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [AZNames, !Ref RegionName, a]
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/19
      MapPublicIpOnLaunch: true
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [AZNames, !Ref RegionName, b]
      VpcId: !Ref VPC
      CidrBlock: 10.0.64.0/19
      MapPublicIpOnLaunch: true
  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:  !FindInMap [AZNames, !Ref RegionName, c]
      VpcId: !Ref VPC
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: true
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [AZNames, !Ref RegionName, a]
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/19
      MapPublicIpOnLaunch: true
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [AZNames, !Ref RegionName, b]
      VpcId: !Ref VPC
      CidrBlock: 10.0.96.0/19
      MapPublicIpOnLaunch: true
  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:  !FindInMap [AZNames, !Ref RegionName, c]
      VpcId: !Ref VPC
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: true
  RoutePublicTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RoutePrivateTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RoutePrivateTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RoutePrivateTable03:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RoutePublicTable
  SubnetRouteTableAssociation01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RoutePublicTable
      SubnetId: !Ref PublicSubnet01
  SubnetRouteTableAssociation02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RoutePublicTable
      SubnetId: !Ref PublicSubnet02
  SubnetRouteTableAssociation03:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RoutePublicTable
      SubnetId: !Ref PublicSubnet03
  SubnetRouteTableAssociation04:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RoutePrivateTable01
      SubnetId: !Ref PrivateSubnet01
  SubnetRouteTableAssociation05:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RoutePrivateTable02
      SubnetId: !Ref PrivateSubnet02
  SubnetRouteTableAssociation06:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RoutePrivateTable03
      SubnetId: !Ref PrivateSubnet03
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Default Security Group"
      GroupDescription: "Allow all traffic."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value: !Ref VPC
    Export :
      Name : !Sub "${AWS::StackName}-VPCIdD"
  PublicSubnet01Id:
    Description: Public DNSName of the newly created EC2 instance
    Value: !Ref PublicSubnet01
    Export :
      Name : !Sub "${AWS::StackName}-PublicSubnet01Id"
  PublicSubnet02Id:
    Description: Public DNSName of the newly created EC2 instance
    Value: !Ref PublicSubnet02
    Export :
      Name : !Sub "${AWS::StackName}-PublicSubnet02Id"
  PublicSubnet03Id:
    Description: Public DNSName of the newly created EC2 instance
    Value: !Ref PublicSubnet03
    Export :
      Name : !Sub "${AWS::StackName}-PublicSubnet03Id"
  PrivateSubnet01Id:
    Description: Public DNSName of the newly created EC2 instance
    Value: !Ref PrivateSubnet01
    Export :
      Name : !Sub "${AWS::StackName}-PrivateSubnet01Id"
  PrivateSubnet02Id:
    Description: Public DNSName of the newly created EC2 instance
    Value: !Ref PrivateSubnet02
    Export :
      Name : !Sub "${AWS::StackName}-PrivateSubnet02Id"
  PrivateSubnet03Id:
    Description: Public DNSName of the newly created EC2 instance
    Value: !Ref PrivateSubnet03
    Export :
      Name : !Sub "${AWS::StackName}-PrivateSubnet03Id"